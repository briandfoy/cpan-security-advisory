#!/usr/bin/env perl
use v5.26;
use strict;

=head1 NAME

util/find_record - discover where a CVE appears in the YAML files

=head1 SYNOPSIS

	# Find the records for several CVE
	$ perl util/find_record CVE-2011-1218 CVE-2022-1234

=head1 DESCRIPTION

Before you make a new report based on a CVE, check that it does not
already exist. That might be a simple grep:

	grep CVE-2022-1234 cpansa/*.yml

However, that finds that string anywhere in the file. Some descriptions
and links have references to other CVEs even though those don't exist
as records in our data.

This tool knows the right place to look ( the `cves` object in each
record, and it can do several at once. So far it only finds the first
instance of each.

=cut

use File::Spec::Functions qw(catfile);
use YAML::XS qw(LoadFile);

my %cves_to_find = map { $_, [] } @ARGV;

my $base = 'cpansa';
opendir( my $dh, $base ) or die "Could not open <$base>: $!";

while( my $file = readdir($dh) ) {
	next unless $file =~ /\.yml\z/;
	my $path = catfile( $base, $file );
	my $yaml = eval { LoadFile( $path ) };

	unless( defined $yaml ) {
		warn "$path: $@\n";
		next;
		}

	my @found_cves =
		map {
			ref $_->{cves} ? $_->{cves}->@* : do {
				warn "$path cves was not an array ref";
				() }
			}
		grep { exists $_->{cves} }
		$yaml->{advisories}->@*;

	foreach my $cve ( @found_cves ) {
		next unless exists $cves_to_find{$cve};
		push $cves_to_find{$cve}->@*, $file
		}
	}

foreach my $key ( sort keys %cves_to_find ) {
	if( 0 == $cves_to_find{$key}->@* ) {
		push $cves_to_find{$key}->@*, '<No records found>';
		}

	say join "\n\t", $key, sort $cves_to_find{$key}->@*;
	}
