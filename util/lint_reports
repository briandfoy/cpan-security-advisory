#!/usr/bin/env perl
use v5.36;
use strict;
use warnings;
use utf8;

use experimental qw(builtin for_list signatures);
use builtin qw(indexed);

use Mojo::Util qw(dumper);
use Term::ANSIColor;
use YAML::XS qw(LoadFile);

use constant ERROR   => 1;
use constant SUCCESS => 0;

=head1 NAME

lint_reports - look from problems in cpansa reports

=head1 SYNOPSIS

In top-level directory, it looks in F<cpansa/>, F<generated_reports>,
and F<external_reports>.

	% perl util/lint_reports

From somewhere else

	% perl util/lint_reports /path/to/cpansa/dir

=head1 DESCRIPTION


=head2 The checks

The CPANSA reports must obey these rules:

=over 4

=item * id, cves, affected_versions, fixed_versions

These are required keys

=item * id

The ID value should be of the form C<CPANSA-DISTNAME-YEAR-SEQUENCE>.

=item * affected_versions, fixed_versions

The version ranges are comma-separated version specifiers, such as
C<< >0.50,<=0.75 >>. The versions are the standard Perl version format
C<< \d+(\.\d+)*(_\d+)? >>. If we find weirder ones, this might have to
change.

=back

=head2 Exit values

The program exits with 0 if it did not find any problems, or 1 if
did.

=cut

my %Errors;
my @files = @ARGV ? @ARGV : sort glob( 'cpansa/*.yml generated_reports/*.yml external_reports/*.yml' );

$|++;
FILE: foreach my $file ( @files ) {
	print "$file:";
	my $data = eval { LoadFile($file) };
	unless( defined $data ) {
		push $Errors{$file}{"__id__"}->@*, $@;
		next FILE;
		}

	my $class = 'Local::CPANReports';
	$class = 'Local::ExternalReports' if $file =~ m/\Aexternal_reports/;

	my $results = $class->run_checks($data);
	$Errors{$file} = $results if defined $results;

	print "\n";
	}

exit( print_summary(\%Errors) );

package Local::Common {
	sub check_range ($class, $range) {
		state $version = qr/ (<|<=|=|>=|>) (\d+(\.\d+)* (_\d+)?) /nxa;
		state $pattern = qr/\A
			$version
			(,$version)*
			\z/nx;

		$range =~ $pattern;
		}

	sub check_ranges ($class, $record) {
		state @keys = qw(affected_versions fixed_versions);

		my @errors = ();

		foreach my $key ( @keys ) {
			unless( exists $record->{$key} ) {
				push @errors, "$key key is missing";
				next;
				}
			next unless defined $record->{$key};

			my @versions = ref $record->{$key} ? $record->{$key}->@* : $record->{$key};

			foreach my $v ( @versions ) {
				push @errors, "$key has invalid range $v" unless $class->check_range($v);
				}
			}

		return unless @errors;

		return join "\n", @errors;
		}

	sub check_required_keys ($class, $record) {
		my @required = $class->required_keys;

		my $message = '';
		my $errors  = 0;
		my @missing = grep { ! exists $record->{$_} } @required;
		return unless @missing;
		return "missing keys @missing";
		}

	sub run_checks { return {} }
	}

package Local::CPANReports {
	use base qw(Local::Common);

	sub record_checks {
		state @subs = qw(
			check_id
			check_required_keys
			check_ranges
			);

		return @subs;
		}

	sub file_checks {
		state @subs = qw(
			);

		return @subs;
		}

	sub check_id ($self, $record) {
		my @errors = ();

		return 'id key is missing' unless exists $record->{id};

		my @table = (
			[ "id does not start with CPANSA", sub { $_[0] !~ m/\ACPANSA-/ } ],
			[ "id has double dashâ€“missing something", sub { $_[0] =~ m/--/ } ],
			[ "id has too many dashes", sub { $_[0] =~ m/-\d+-\d+-\d+/ } ],
			);

		foreach my $row ( @table ) {
			push @errors, $row->[0] if $row->[1]($record->{id});
			}

		return unless @errors;
		return join( "\n", @errors );
	}

	sub check_ranges ($self, $record) {
		state @keys = qw(affected_versions fixed_versions);

		my @errors = ();

		foreach my $key ( @keys ) {
			unless( exists $record->{$key} ) {
				push @errors, "$key key is missing";
				next;
				}
			next unless defined $record->{$key};

			state $version = qr/ ([<>=!]=?)? (\d+(\.\d+)* (_\d+)?) /nxa;
			state $pattern = qr/\A
				$version
				(,$version)*
				\z/nx;

			my @versions = ref $record->{$key} ? $record->{$key}->@* : $record->{$key};

			foreach my $v ( @versions ) {
				push @errors, "$key has invalid range $v" unless $v =~ $pattern;
				}
			}

		return unless @errors;

		return join "\n", @errors;
		}

	sub required_keys {
		qw(
		id
		cves
		affected_versions
		fixed_versions
		)
		}

	sub run_file_checks ($class, $data) {
		my %results;
		foreach my $method ( $class->file_checks ) {
			my $message = $class->$method($data);
			next unless defined $message;
			push $results{$method}->@*, $message;
			}

		return \%results;
		}

	sub run_record_checks ($class, $data) {
		my %results;
		foreach my($n, $report) ( indexed($data->{advisories}->@*) ) {
			print ".";
			my $id = $report->{id} // "report $n";
			foreach my $method ( $class->record_checks ) {
				my $message = $class->$method($report);
				next unless defined $message;
				push $results{$id}->@*, $message;
				}
			}

		return \%results;
		}

	sub run_checks ($class, $data) {
		my %results;

		$results{records} = $class->run_record_checks($data);
		$results{file} = $class->run_file_checks($data);

		return keys %results? \%results : ();
		}
	}

package Local::ExternalReports {
	use base qw(Local::Common);

	sub record_checks {
		state @subs = qw(
			check_required_keys
			);

		return @subs;
		}

	sub file_checks {
		state @subs = qw(
			);

		return @subs;
		}

	sub check_advisories ($class, $data) {
		my %results;


		foreach my($n, $report) ( indexed($data->{advisories}->@*) ) {
			print ".";
			my $id = $report->{cve} // "report $n";
			foreach my $method ( $class->record_checks ) {
				my $message = $class->$method($report);
				next unless defined $message;
				push $results{$id}->@*, $message;
				}
			}

		return %results if keys %results;
		return;
		}

	sub check_meta ($class, $data) {
		state @required_keys = qw(
			advisories
			name
			perl_distributions
			);

		my @missing = grep { ! exists $data->{$_} } @required_keys;

		return [ "Missing keys: @missing" ] if @missing;
		return;
		}

=pod

perl_distributions:
  - name: MySQL-Admin
    last_version_checked: '1.18'
    affected:
      - perl_module_versions: '>=1.14,<=1.18'
        distributed_library_version: '2.0.2'

=cut

	sub check_perl ($class, $data ) {
		state @required_keys = qw(name affected);
		my @errors;

		foreach my($n, $entry) ( indexed($data->{perl_distributions}->@*) ) {
			my @missing = grep { ! exists $entry->{$_} } @required_keys;
			if( exists $entry->{affected} ) {
				foreach my $affected ( $entry->{affected}->@* ) {
					push @missing,
						map { "affected/$_" }
						grep { ! exists $affected->{$_} }
						qw(perl_module_versions distributed_library_version);

					if( exists $affected->{perl_module_versions} ) {
						push @errors, "Bad range $affected->{perl_module_versions}"
							unless $class->check_range($affected->{perl_module_versions});
						}
					}
				}
			push @errors, "Missing keys: @missing" if @missing;
			}

		return \@errors if @errors;
		return;
		}

	sub required_keys {
		qw(
			cve
			description
			affected_versions
			fixed_versions
		)
		}

	sub run_file_checks ($class, $data) {
		my %results;
		foreach my $method ( $class->file_checks ) {
			my $message = $class->$method($data);
			next unless defined $message;
			push $results{$method}->@*, $message;
			}

		return \%results;
		}

	sub run_record_checks ($class, $data) {
		my %results;
		foreach my($n, $report) ( indexed($data->{advisories}->@*) ) {
			print ".";
			my $id = $report->{id} // "report $n";
			foreach my $method ( $class->record_checks ) {
				my $message = $class->$method($report);
				next unless defined $message;
				push $results{$id}->@*, $message;
				}
			}

		return \%results;
		}

	sub run_checks ($class, $data) {
		my %results;

		$results{records} = $class->run_record_checks($data);
		$results{file} = $class->run_file_checks($data);

		return keys %results? \%results : ();
		}
	}

sub print_summary ( $Errors ) {
	my $errors = 0;

	say "========== SUMMARY ==========";
	FILENAME: foreach my $filename ( sort keys $Errors->%* ) {
		my $string = '';
		my $errors = 0;

		my $f_h = $Errors->{$filename};

		TYPE: foreach my $type ( keys $f_h->%* ) {
			my $count_of_type = 0;
			my $t_h = $f_h->{$type};
			PROBLEM: foreach my $problem ( keys $t_h->%* ) {
				say "\t$filename:" if $errors == 0;
				say "\t$type:" if $count_of_type++ == 0;
				my $p_a = $t_h->{$problem};
				MESSAGE: foreach my $message ( $p_a->@* ) {
					$errors++;
					say colored( ['red bold'], $message =~ s/^/\t\t/mgr );
					}
				}
			}
		}

	say colored( ['green bold'], "No problems found" ) unless $errors;

	return !! $errors;
	}

__END__
---
- affected_versions: "<1.13"
  cves:
    - CVE-2011-2728
  description: >
    The bsd_glob function in the File::Glob module for Perl before
    5.14.2 allows context-dependent attackers to cause a denial of
    service (crash) via a glob expression with the GLOB_ALTDIRFUNC
    flag, which triggers an uninitialized pointer dereference.
  distribution: perl
  fixed_versions: ~
  id: CPANSA-File-Glob-2011-2728
  references:
    - http://lists.fedoraproject.org/pipermail/package-announce/2011-November/069752.html
    - http://www.securityfocus.com/bid/49858
    - http://cpansearch.perl.org/src/FLORA/perl-5.14.2/pod/perldelta.pod
    - http://perl5.git.perl.org/perl.git/commit/1af4051e077438976a4c12a0622feaf6715bec77
    - http://secunia.com/advisories/46172
    - https://blogs.oracle.com/sunsecurity/entry/cve_2011_2728_denial_of1
    - https://bugzilla.redhat.com/show_bug.cgi?id=742987
  reported: 2012-12-21
  severity: ~
