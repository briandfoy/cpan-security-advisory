#!/usr/bin/env perl
use v5.26;
use strict;
use experimental qw(signatures);
use open qw(:std :utf8);

=head1 NAME

make_record - turn a CVE into a CPANSA YAML object

=head1 SYNOPSIS

Give this program a CVE ID and see what it does. It guesses the CPAN
module name, so you need to check that:

Try it with just the CVE. If it can guess the package, it uses that
to guess the filename under F<cpansa/>:

	$ perl util/make_record CVE-2011-4117

Sometimes it can't guess the namespace, so run it again with what you see
in the record:

	$ perl util/make_record CVE-2011-4117 Some-Package

This creates or appends to the file F<cpansa/CPANSA-Some-Package.yml>.

Use C<-F> if you don't want the record to go to a file.
The output will go to standard output:

	$ perl util/make_record -F CVE-2011-4117 Some-Package
	---
	- affected_versions: ~
	  cves:
		- CVE-2011-4117
	  description: >
	    The Some::Package module 1.03 for Perl does not properly
	    handle temporary files.
	  distribution: Some-Package
	  fixed_versions: ~
	  id: CPANSA-Some-Package-2011-4117
	  references:
		- http://www.openwall.com/lists/oss-security/2011/11/04/2
		- http://www.openwall.com/lists/oss-security/2011/11/04/4
		- https://rt.cpan.org/Public/Bug/Display.html?id=69594
	  reported: 2020-01-31
	  severity: high

It might be easier to respond to prompts to enter input by not giving
it any arguments:

	$ perl util/make_record

No argument implies C<-p>:

	$ perl util/make_record
	CVE value []> CVE-2011-4117
	Perl namespace []> Some::Package
	rt.cpan.org issue []>
	Affected versions []>
	Fixed versions []>
	Embedded library name []>
	Embedded library version []>
	Output filename [cpansa/CPANSA-Some-Package.yml]>

The C<-p> will remember values from the command line:

	$ perl util/make_record -p CVE-2011-4117 Some-Package
	CVE value [CVE-2011-4117]>
	Perl namespace [Some-Package]>
	rt.cpan.org issue []>
	Affected versions []>
	Fixed versions []>
	Embedded library name []>
	Embedded library version []>
	Output filename [cpansa/CPANSA-Some-Package.yml]>

=head1 DESCRIPTION

B<make_record> assembles everything you need for the report of a
CPAN module vulnerability.

=head2 Options

=over 4

=item * B<-a>, B<--affected> - the value for affected versions

=item * B<--cve> - the CVE number (but you can specify it as the first argument)

=item * B<-en>, B<--embedded_name> - the name of the vulnerable embedded library

=item * B<-ev>, B<--embedded_version> - the vulnerable version of the embedded library

=item * B<-f>, B<--fixed> - the value for fixed versions

=item * B<-F> - do not guess a filename based on the arguments or CVE (default is to do that)

=item * B<-n>, B<namespace> - the affected Perl namespace

=item * B<-o>, B<--output_file> - specify the destination of the output

=item * B<-p>, B<--prompt> - prompt for values (true if there are no arguments)

=item * B<-r=N>, B<--rt=N> - Add the URL for the rt.cpan.org ticket N

=item * B<-s> - force the YAML start line C<---> from output.

=item * B<-S> - remove the YAML start line C<--->. B<-s> wins if you use both.

=back

=head2 Versions

Versions are comma-separated values of version specifications. Each
specification includes a comparator. These come from L<CPAN::Audit::Version>:

=over 4

=item * B<< < >> - all versions less than the specified versions

=item * B<< <= >> - all versions less than and including the specified versions

=item * B<< == >> - the exact version specified

=item * B<< != >> - all versions except the one specified

=item * B<< > >> - all versions greater than the specified versions

=item * B<< >= >> - all versions greater than and including the specified versions

=back

Note that non-semantic versions (fewer than two dots) use three places
for minor versions, so C<5.34> is C<5.340>. For Perl versions, include
all three places, so C<v5.34> is C<5.034>.

=head2 The report format

The report format looks like this:

    ---
    - affected_versions: ~
      cves:
      - CVE-2011-4117
      description: >
      The Batch::BatchRun module 1.03 for Perl does not properly handle
      temporary files.
      fixed_versions: ~
      id: CPANSA-Some-Package-2011-4117
      references:
      - http://www.openwall.com/lists/oss-security/2011/11/04/2
      - http://www.openwall.com/lists/oss-security/2011/11/04/4
      - https://rt.cpan.org/Public/Bug/Display.html?id=69594
      reported: 2020-01-31
      severity: high

=cut

use FindBin;
use lib "$FindBin::Bin/../lib";

use Local::CPANSA;
use Local::Config::make_record;

use Mojo::Util qw(dumper);
use YAML;

run( @ARGV ) unless caller;

sub run ( @args ) {
	my $config = Local::Config::make_record->new( @args );

	my $report_path = $config->output_filename // $config->guess_output_filename;
	say STDERR "Report path is <$report_path>";

	my $existing = do {
		if( -e $report_path ) {
			say "Path <$report_path> exists";
			eval { YAML::LoadFile( $report_path ) };
			}
		else {
			say "Path <$report_path> does not exist";
			Local::Config::make_record->new_meta($config);
			}
		};


	my $advisory = Local::CPANSA::assemble_advisory( $config );

	my $new_id = $advisory->{id};
	my $new_id_exists = grep { $_->{id} eq $new_id } $existing->{advisories}->@*;

	if( $new_id_exists ) {
		say STDERR "ID $new_id already exists";
		exit 1;
		}

	push $existing->{advisories}->@*, $advisory;

=pod
	# We want the folded form to avoid yamllint warnings, but YAML
	# no longer supports this. We can cheat a little because we know
	# exactly where this shows up and we don't have to handle arbitrary
	# data structures
	$string =~ s/^(\x20\x20description:\s+)(.*)/
		state $rc = require Text::Format;
		my( $field, $value ) = @{^CAPTURE};
		my $first_char = substr $value, 0, 1;
		if( $first_char =~ m{['"]} ) {
			my $last_char  = substr $value, -1, 1;
			if( $last_char eq $first_char ) {
				$value =~ s{\A\Q$first_char\E|\Q$first_char\E\z}{}g;
				}
			}
		my $wrapped = Text::Format->new({columns => 70})->format($value);
		$wrapped =~ s{\A\s+|\s+\z}{}g;
		$wrapped =~ s|^|    |gm;
		"$field>\n$wrapped";
		/em;

=cut

	# If we want to redirect into an existing file, take out the YAML
	# header, unless we have -s to force the header

	my $fh = do {
		if( $config->output_filename eq '-' ) { \*STDOUT }
		else {
			open my $fh, '>:encoding(UTF-8)', $report_path
				or die "Could not open <$report_path>: $!\n";
			$fh;
			}
		};

	my $string = YAML::Dump($existing);

	print { $fh } $string;
	}

sub rt_n_to_url ( $rt ) {
	"https://rt.cpan.org/Public/Bug/Display.html?id=$rt"
	}
