#!/usr/bin/env perl
use v5.26;
use experimental qw(signatures);

use strict;
use warnings;

use Carp qw(croak);
use CPAN::DistnameInfo;
use File::Basename qw(basename);
use File::Spec::Functions qw(catfile);
use HTTP::Tiny;
use JSON ();
use PerlIO::gzip;
use YAML::Tiny;
use File::Temp;

use subs qw(config message);

=head1 NAME

util/generate - create the data for lib/CPANSA/DB.pm

=head1 SYNOPSIS

	# usual operation, outputs to lib/CPANSA/DB.pm
	# gets data from .../cpansa/*.yml
	% perl util/generate

	# same thing
	% perl util/generate --perl-module

	# usual operation, outputs to lib/CPANSA/DB.pm
	# gets data from other_source/*.yml
	% perl util/generate other_source/*.yml

	# suppress progress messages
	% perl util/generate -q
	% perl util/generate --quiet

	# output JSON instead of a Perl module
	% perl util/generate --json

	# output both
	% perl util/generate --json --perl-module

=head1 DESCRIPTION

This program chews through the CPAN security advisory reports and
makes the L<CPANSA::DB> module. This is the same thing that
L<CPAN::Audit::DB> used to be when it was in the L<CPAN::Audit>
distribution.

=head1 AUTHOR

Original author: Viacheslav Tykhanovskyi (C<vti@cpan.org>)

Maintained by: brian d foy (C<briandfoy@pobox.com>)

=head1 LICENSE

L<CPANSA::DB> is dual-licensed under the GPL or the Artistic License.
See the included F<LICENSE> file for details.

=cut

run(@ARGV) unless caller;

sub _message ( $fh, $message ) {
	$message =~ s/\v+\z//;
	say {$fh} $message
}

sub info ( $message ) {
	_message *STDOUT, $message;
}

sub debug ( $message ) {
	return unless config()->{debug};
	_message *STDERR, $message;
}

sub dumper {
	state $rc = require Data::Dumper;
	Data::Dumper->new([@_])->Indent(1)->Sortkeys(1)->Terse(1)->Useqq(1)->Dump
}

sub all_releases {
	my ($distribution) = @_;
	my $tries = 0;

	my $content_json;
	FETCH: {
		sleep $tries * 10;
		debug( "Try $tries for $distribution" );
		my $response = HTTP::Tiny->new->get(
			'http://fastapi.metacpan.org/v1/release/versions/'.$distribution
		);

		$content_json = eval { JSON::decode_json( $response->{content} ) };
		last if $content_json;
		redo FETCH unless $tries++ > 3;
		}

	my @results = sort { $a->{date} cmp $b->{date} } @{ $content_json->{releases} };
	return unless @results;

	return @results;
}

sub perl_module_file ($package) {
	my @parts = split /::/, $package;
	$parts[-1] .= '.pm';

	catfile('lib', @parts);
}

sub json_file () {
	state $file = 'cpan-security-advisory.json';
	$file;
}

sub default_version ($output_file) {
	my $opts = config();
	my( $year, $month, $day ) = (localtime)[5,4,3];

	my $date = sprintf '%4d%02d%02d', $year + 1900, $month + 1, $day;
	my( $previous_date, $previous_serial ) = get_previous_date_serial( $output_file );
	debug "PREVIOUS DATE: $previous_date PREVIOUS SERIAL: $previous_serial";

	my $serial = sprintf '%03d', $previous_date == $date ? $previous_serial + 1 : 1;
	debug "NEW SERIAL: $serial";
	debug "NEW DATE: $date";

	my $version = join '.', $date, $serial;
	debug "NEW VERSION: $version";
	return $version;
}

sub get_file_list ( $args ) {
	unless( @$args and -e 'cpansa' ) {
		debug 'No arguments given for source directory: looking in cpansa/';
		@$args = glob( 'cpansa/*.yml' );
	}

	my @files = ($^O eq 'MSWin32') ? map { glob } @$args : @$args;

	\@files;
}

sub get_previous_date_serial ( $file ) {
	open my $fh, '<:encoding(UTF-8)', $file or return (-1, 0);
	while( <$fh> ) {
		next unless /VERSION\s*=\s*'(\d{8})\.(\d{3})'/;
		return ( $1, $2 );
	}
	return;
}

sub output_gpg_signature ( $string, $file ) {
	my $opts = config();

	return unless defined $opts->{gpg_key};

	my $gpg_file = $file . '.gpg';

	state $rc = require Encode;
	my $octets = Encode::encode("UTF-8", $string);

	my @command = ( 'gpg', '--yes', '-o', $gpg_file, '-sb', '--armor', '-u', $opts->{gpg_key} );
	debug "COMMAND is @command";

	open my $gpg_fh, '|-', @command;

	print { $gpg_fh } $octets;

	close $gpg_fh or croak "Problem making GPG signature: $!";

	return 1;
}

sub process_files ( $files ) {
	my %db;
	foreach my $file ( $files->@* ) {
		message "Reading $file";
		my $yaml = YAML::Tiny->read($file)->[0];
		message sprintf "\tFound %d reports", scalar $yaml->{advisories}->@*;
		my %dists_in_file;
		my $n = 0;

		warn "Missing distribution key in $file\n" unless exists $yaml->{distribution};
		warn "Undefined distribution key in $file\n" unless defined $yaml->{distribution};
		warn "Empty distribution key in $file\n" unless length $yaml->{distribution};
		my $dist = $yaml->{distribution};

		if( exists $db{dists}{$dist}{advisories} ) {
			warn "\tAlready have advisories for $dist\n";
		}
		else {
			$db{dists}{$dist}{advisories} = [];
		}

		foreach my $advisory ( $yaml->{advisories}->@* ) {
			$advisory->{distribution} = $dist;
			$advisory->{darkpan} = 'true' if( exists $yaml->{darkpan} && $yaml->{darkpan} eq 'true' );
			$advisory->{url} = $yaml->{url} if defined $yaml->{url};

			delete $advisory->{github_security_advisory};
			push $db{dists}{$dist}{advisories}->@*, $advisory;
		}
	}

	provides( \%db );

	foreach my $dist ( sort keys $db{dists}->%* ) {
		message "Processing $dist";
		my @releases = all_releases($dist);
		if (!@releases) {
			warn "no releases found on CPAN for '$dist'\n";
			next;
		}

		# try to fetch the latest release, according to MetaCPAN.
		# if there is no 'latest' tag, grab the last item (because
		# the list is ordered by date).
		my ($main_module, @versions);
		foreach my $release (@releases) {
			push @versions, { date => $release->{date}, version => $release->{version} };
			if ($release->{status} eq 'latest') {
				$main_module = $release->{main_module};
			}
		}
		$main_module = $releases[-1]->{main_module} unless $main_module;

		$db{dists}{$dist}{versions} = \@versions;
		$db{dists}{$dist}{main_module} = $main_module;
	}

	# XXX: need to investigate why this shows up as utf8
	$db{dists}{'perl'}{main_module} = 'perl';

	\%db;
}

sub process_options ( @args ) {
	state $rc = require Getopt::Long;

	my %results = (
		debug       => 0,
		gpg_key     => $ENV{CPAN_AUDIT_GPG_KEY_FINGERPRINT},
		);
	*config = sub () { \%results };

	my %opts = (
		'debug|d'          => \ $results{debug},
		'dry-run|n'        => \ $results{dry_run},
		'gpg-key|g=s'      => \ $results{gpg_key},
		'module-version'   => \ $results{version},
		'quiet|q'          => \ $results{quiet},
	);

	my $p = Getopt::Long::Parser->new();
	$p->configure( qw(no_ignore_case) );
	$p->getoptionsfromarray( \@args, %opts );

	debug "Options: " . dumper( \%results );

	$results{version} //= default_version( perl_module_file('CPANSA::DB') );

	\@args;
}

sub provides {
	my ($db) = @_;

	my $ua = HTTP::Tiny->new;

	my $tmpdir = File::Temp::tempdir();
	my $details_file = catfile($tmpdir, '02packages.details.txt.gz');
	message "Downloading 02packages.details.txt.gz (this may take awhile)";
	$ua->mirror( 'http://www.cpan.org/modules/02packages.details.txt.gz',
		$details_file );
	message "Downloaded 02packages.details.txt.gz";
	message "Digesting 02packages.details.txt.gz (this may take awhile)";

	open my $fh, '<:gzip', $details_file
	  or die "Can't open '$details_file': $!";

	while ( defined( my $line = <$fh> ) ) {
		chomp $line;

		last if $line eq '';
	}

	while ( defined( my $line = <$fh> ) ) {
		my ( $module, $version, $pathname ) = split /\s+/, $line;
		next unless $module && $pathname;

		my $dist_info = CPAN::DistnameInfo->new($pathname);
		next unless $dist_info;

		my $author = $dist_info->cpanid;
		my $dist   = $dist_info->dist;
		my $name   = $dist_info->distvname;

		next unless $dist;

		next unless $db->{dists}->{$dist};

		$db->{module2dist}->{$module} = $dist;
	}

	close $fh;
}

sub run ( @args ) {
	my( $leftover_args ) = process_options( @args );
	my $opts = config();

	*message = $opts->{quiet} ? sub ($m) {} : sub ($m) { _message *STDOUT, $m };

	my $files = get_file_list( $leftover_args );
	die "Usage: <files>\n" unless @$files;

	exit if $opts->{dry_run};

	my $db = process_files( $files );

	add_meta( $db );

	my @packages = qw(CPAN::Audit::DB CPANSA::DB);

	PERL_MODULE: foreach my $package  ( @packages ) {
		say "Creating Perl module $package ...";
		my $string = stringify_data($db, $package);
		my $filename = perl_module_file($package);
		debug "Outputting perl module <$filename>";

		{
		open my $fh, '>:encoding(UTF-8)', $filename;
		print {$fh} $string;
		close $fh;
		}

		{
		my $pod = $string =~ s/^package.*//rms;
		my $pod_file = $filename =~ s/\.pm\z/\.pod/r;
		open my $fh, '>:encoding(UTF-8)', $pod_file;
		print {$fh} $pod;
		close $fh;
		}

		}

	JSON: {
		my $filename = json_file();
		say "Creating JSON $filename...";
		my $string = JSON::encode_json($db);
		debug "Outputting JSON file <$filename>";
		open my $fh, '>:encoding(UTF-8)', $filename;
		print {$fh} $string;
		close $fh;
		output_gpg_signature( $string, $filename );
	}
}

sub add_meta ( $db ) {
	my $commit = get_commit();
	my $repo = get_repo();

	$db->{meta} = {
		repo      => $repo,
		generator => $0,
		date      => scalar gmtime,
		epoch     => time,
		commit    => $commit,
	};
}

sub get_commit {
	my( $commit ) = `git rev-parse HEAD`;
	chomp ($commit);
	$commit;
}

sub get_repo {
	my $repo = `git config --get remote.origin.url`;
	chomp($repo);
	$repo =~ s|\Agit\@github.com:|https://github.com/|;
	$repo;
}

sub stringify_data ( $db, $package ) {
	my $opts = config();

	state $rc = require Data::Dumper;

	no warnings 'once';
	local $Data::Dumper::Sortkeys = 1;
	my $dump = Data::Dumper::Dumper( $db );
	$dump =~ s{^\$VAR1\s*=\s*}{};
	$dump =~ s{}{};

	my $commit = get_commit();
	my $repo = get_repo();

	my $string = <<~"EOF";
		# created by $0 at @{[ scalar gmtime ]}
		# $repo $commit

		=encoding utf8

		=head1 NAME

		$package - the CPAN Security Advisory data as a Perl data structure, mostly for CPAN::Audit

		=head1 SYNOPSIS

		This module is primarily used by L<CPAN::Audit>.

			use $package;

			my \$db = $package->db;

		=head1 DESCRIPTION

		The C<db> subroutine returns the CPAN Security Advisory (CPANSA) reports
		as a Perl data structure. However, anything can use this.

		Each release also comes with a F<.gpg> file that has the signature
		for the file. If you cannot confirm that the module file has the
		right signature, it might have been corrupted or modified.

		This module is available outside of CPAN as a release on GitHub:
		L<https://github.com/briandfoy/cpan-security-advisory/releases>.
		Each release on GitHub includes an attestation.

		There is also a JSON file that provides the same datastructure.

		=head2 Subroutines

		There is exactly one subroutine:

		=over 4

		=item * db

		Returns the hashref of all the CPANSA reports.

		=back

		=head1 VERIFYING

		This distribution now uses
		L<GitHub Attestations|https://github.blog/2024-05-02-introducing-artifact-attestations-now-in-public-beta/>,
		which allow you to verify that the archive file you have was made from
		the official repo.

		You need a GitHub account and the L<gh tool|https://github.com/larsks/ghcli>.

			# download the distro file from GitHub, MetaCPAN, or a CPAN mirror
			\$ gh auth login
			...follow instructions...
			\$ gh attestation verify CPANSA-DB-20241111.tar.gz --owner briandfoy

		Additionally, each release codes with GPG signature that allows you to
		verify that this. The key is the same one used when the database was
		distributed with L<CPAN::Audit>:

			\$ gpg --verify lib/CPANSA/DB.pm.gpg lib/CPANSA/DB.pm
			gpg: Signature made Mon Nov 18 11:00:10 2024 EST
			gpg:                using RSA key 75AAB42CBA0D7F37F0D6886DF83F8D5E878B6041
			gpg: Good signature from "CPAN::Audit (brian d foy) (https://github.com/briandfoy/cpan-audit) <bdfoy\@cpan.org>" [ultimate]

		=head1 SEE ALSO

		Everything is managed in GitHub:

		=over 4

		=item * L<https://github.com/briandfoy/cpan-security-advisory/releases>

		=back

		=cut

		package $package;

		use strict;
		use warnings;

		our \$VERSION = '$opts->{version}';

		sub db {
			$dump
		}

		__PACKAGE__;
		EOF
}
