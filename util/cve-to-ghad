#!perl
use v5.36;

=head1 NAME

cve-to-ghad - convert a CVE identifier to a GitHub Advisory Database identifier

=head1 SYNOPSIS

	$ perl util/cve-to-ghad CVE-2001-0815
	CVE-2001-0815	GHSA-c5px-j32w-fcqp	unreviewed

	$ perl util/cve-to-ghad CVE-2001-0815 CVE-2019-20454
	CVE-2001-0815	GHSA-c5px-j32w-fcqp	unreviewed
	CVE-2019-20454	GHSA-6wcm-vmc4-h93p	unreviewed

=head1 DESCRIPTION

Given a CVE identifier, this script fetches the  GitHub Advisory Database
identifier identifier for that CVE and the state of the GitHub report.
Most of the reports dealing with Perl will be C<unreviewed> since GitHub
does not pay attention to these.

=head1 SEE ALSO

=over 4

=item L<https://github.com/advisories>

=item L<https://docs.github.com/en/rest/security-advisories/global-advisories?apiVersion=2022-11-28>.

=cut

=head1 AUTHOR

Maintained by: brian d foy (C<briandfoy@pobox.com>)

=head1 LICENSE

Copyright Â© 2024, brian d foy C<< <briandfoy@pobox.com> >>. All rights reserved.
This software is available under the Artistic License 2.0.

=cut

use Mojo::UserAgent;
use Mojo::Util qw(dumper);

my $url = 'https://api.github.com/advisories';

my $ua = Mojo::UserAgent->new;
$ua->on( start => sub ( $ua, $tx) {
	$tx->req->headers->accept('application/vnd.github+json');
	$tx->req->headers->header('X-GitHub-Api-Version' => '2022-11-28' );
	} );

my @types = qw(reviewed malware unreviewed);

CVE: foreach my $cve ( @ARGV ) {
	state %Seen;
	next if $Seen{$cve}++;
	TYPE: foreach my $type ( qw(reviewed malware unreviewed) ) {
		my $query = { type => $type, cve_id => $cve };
		my $tx = $ua->get( $url => form => $query  );
		next TYPE unless defined $tx->res->json->[0]{ghsa_id};
		say "$cve\t" . $tx->res->json->[0]{ghsa_id} . "\t$type";
		last TYPE;
		}
	}

__END__
[
  {
    "credits" => [],
    "cve_id" => "CVE-2012-6141",
    "cvss" => {
      "score" => undef,
      "vector_string" => undef
    },
    "cwes" => [
      {
        "cwe_id" => "CWE-94",
        "name" => "Improper Control of Generation of Code ('Code Injection')"
      }
    ],
    "description" => "The App::Context module 0.01 through 0.968 for Perl does not properly use the Storable::thaw function, which allows remote attackers to execute arbitrary code via a crafted request to (1) App::Session::Cookie or (2) App::Session::HTMLHidden, which is not properly handled when it is deserialized.",
    "ghsa_id" => "GHSA-pw79-h962-2rw9",
    "github_reviewed_at" => undef,
    "html_url" => "https://github.com/advisories/GHSA-pw79-h962-2rw9",
    "identifiers" => [
      {
        "type" => "GHSA",
        "value" => "GHSA-pw79-h962-2rw9"
      },
      {
        "type" => "CVE",
        "value" => "CVE-2012-6141"
      }
    ],
    "nvd_published_at" => "2014-06-04T23:55:00Z",
    "published_at" => "2022-05-17T01:37:42Z",
    "references" => [
      "https://nvd.nist.gov/vuln/detail/CVE-2012-6141",
      "https://exchange.xforce.ibmcloud.com/vulnerabilities/84198",
      "http://seclists.org/oss-sec/2013/q2/318",
      "https://github.com/advisories/GHSA-pw79-h962-2rw9"
    ],
    "repository_advisory_url" => undef,
    "severity" => "high",
    "source_code_location" => "",
    "summary" => "The App::Context module 0.01 through 0.968 for Perl does not properly use the Storable::thaw...",
    "type" => "unreviewed",
    "updated_at" => "2023-02-03T05:04:57Z",
    "url" => "https://api.github.com/advisories/GHSA-pw79-h962-2rw9",
    "vulnerabilities" => [],
    "withdrawn_at" => undef
  }
]
