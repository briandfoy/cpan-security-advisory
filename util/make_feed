#!/Users/brian/bin/perl
use v5.26;
use utf8;
use open qw(:std :utf8);
use experimental qw(signatures);

use FindBin;
use lib "$FindBin::Bin/../lib";

use Local::CPANSA;

use Mojo::DOM;
use Mojo::URL;
use Mojo::UserAgent;
use Mojo::Util qw(dumper);

my $search_url = Mojo::URL->new("https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=perl");

my $map_sub = sub {
	state $header = 1;
	if( $header ) { $header = 0; return () }
	my $dom = $_;

	my $array = $dom->find( 'td' )->map( sub {
		my $text =  $_->all_text;
		$text =~ s/\v+/ /gr;
		} )->to_array;

	my $url = eval { $dom->at( 'td > a' )->attr('href') };
	$url =  Mojo::URL->new($url)->to_abs($search_url);

	my $hash = {
		cve         => $array->[0],
		description => $array->[1],
		url         => $url,
		};
	};

my $assemble_sub = sub {
	my $hash = $_;
	sleep 2;
	$hash->{record} = eval { Local::CPANSA::assemble_record( $hash->{cve} ) };
	$hash
	};

my $feed = start_xml();

my $items = Mojo::UserAgent
	->new->get($search_url)
	->res
	->dom->find( 'div#TableWithRules table tr' )
	->head(25)
	->map( $map_sub )
	->grep( sub { length $_->{cve} } ) # first is a header row
	->grep( sub { ! Local::CPANSA::cve_recorded( $_->{cve} ) } )
	->grep( sub { ! Local::CPANSA::cve_ignored( $_->{cve} ) } )
	->grep( sub { defined } ) # don't know whose making the undef element
	->map( $assemble_sub )
	->map( sub {
		my $entry = tag('entry')->at('entry');
		$entry->append_content( tag( id      => $_->{cve}         ) );
		$entry->append_content( tag( title   => $_->{cve}         ) );
		$entry->append_content( tag( content => $_->{description} ) );
		$entry->append_content( tag( 'link' ) );

		$entry->at('link')->attr( rel => 'alternate', href => $_->{url} );

		$feed->append_content($entry);
		} )
	->to_array
	;

add_default_item($feed) unless $items->@*;

say '<?xml version="1.0" encoding="UTF-8" standalone="no" ?>' . $feed;

sub add_default_item ( $feed ) {
	my $message = "No new Perl CVEs for " . localtime;
	my $entry = tag('entry')->at('entry');
	$entry->append_content( tag( id      => "$$-" . time ) );
	$entry->append_content( tag( title   => $message ) );
	$entry->append_content( tag( content => $message ) );

	$feed->append_content($entry);
	}

sub now { # 2003-12-13T18:30:02Z
	my @gmtime = gmtime();
	$gmtime[5] += 1900;
	$gmtime[4] += 1;

	my $now = sprintf '%4d-%02d-%02dT%02d:%02d:%02dZ', @gmtime[5,4,3,2,1,0];
	}

sub start_xml () {
	my $feed = Mojo::DOM->new_tag('feed', xmlns => 'http://www.w3.org/2005/Atom');

	my $description = <<~"HERE";
		Common Vulnerabilities and Exposures related to Perl and CPAN.

		This is part of the CPAN Audit project. See
		https://github.com/briandfoy/cpan-security-advisory .
		HERE

	my %hash = (
		id          => 'https://www.theperlreview.com/perl-cve-atom.xml',
		title       => 'Perl and CPAN CVEs',
		subtitle    => $description,
		updated     => now(),
		);

	foreach my $tag ( keys %hash ) {
		$feed->at('feed')->append_content( tag($tag, $hash{$tag}) );
		}

	$feed->at('feed')->append_content( Mojo::DOM->new_tag( 'link', rel => 'self', href => $hash{id}, '' ) );
	$feed->at('feed');
	}

sub tag ( $tag, $content = undef ) { Mojo::DOM->new_tag($tag, $content // '' ) }
