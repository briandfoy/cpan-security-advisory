---
name: generate-db

# https://github.com/actions/checkout/issues/1590
env:
    ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

permissions:
    actions: write
    contents: write
    id-token: write
    attestations: write
    pull-requests: write

on:
    schedule:
        - cron: "37 3 * * 0"
    workflow_dispatch:

jobs:
    generate:
# We need a GitHub secret, so create an Environment named "release"
# * Go to Settings > Environment (repo settings, not account settings)
# * Make an environment named "release"
# * Add a secret named "RELEASE_ACTION_TOKEN" with a GitHub token with repo permissions
# If you use a different token name, update "RELEASE_ACTION_TOKEN" in the last
# step in this job.
        environment: generate
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - ubuntu-latest
                perl-version:
                    - 'latest'
        container:
            image: perl:${{ matrix.perl-version }}
        steps:
            - uses: actions/checkout@v3
            - name: setup packages
              run: |
                apt-get update
                apt -y install gh gnupg jq
            - name: setup GPG
              run: |
                gpg --version
                gpg --keyserver keys.openpgp.org --recv-keys 75AAB42CBA0D7F37F0D6886DF83F8D5E878B6041 867D53B08E433DF401A06EF49A9C0FE7F64876BF
                echo "${{ secrets.GPG_SECRET_KEY_ARMORED }}" | gpg --import
                gpg --export-ownertrust | sed 's/:.*/:6:/' | gpg --import-ownertrust
            - name: git corrections
              run: |
                git config --global --add safe.directory `pwd`
                git config --global user.email ${{ vars.GIT_USER_EMAIL }}
                git config --global user.name  '${{ vars.GIT_USER_NAME  }}'
# Some older versions of Perl have trouble with hostnames in certs. I
# haven't figured out why.
            - name: Setup environment
              run: |
                echo "PERL_LWP_SSL_VERIFY_HOSTNAME=0" >> $GITHUB_ENV
# Restore the last module installation for this OS/perl combination. This
# saves several minutes in some cases. When cpan installs updates, the
# 'save' counterpart for 'restore' will update the cache.
            - name: Restore Perl modules
              id: perl-modules-cache-restore
              uses: actions/cache/restore@v4
              with:
                key: generate-${{ runner.os }}-${{ matrix.perl-version }}-modules
                path: |
                  /usr/local/lib/perl5
                  /usr/local/bin/cover
                  /usr/local/bin/cpan
# We cannot reuse cache keys, so we'll delete it and then save it again
# There are various hacks for this, but GitHub has so far declined to
# do what so many people want. This seems like a long way to go to do
# this, but most of the problem is translating the unique cache key name
# to another hidden ID value. This is pervasive in the GitHub API.
            - name: Delete cache
              id: delete-cache
              env:
                GH_TOKEN: ${{ github.token }}
              run: |
                gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/actions/caches \
                  | jq -r '.actions_caches[] | select(.key == "${{ steps.perl-modules-cache-restore.outputs.cache-primary-key }}") | .id' \
                  | xargs -I{} gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/actions/caches/{}
# I had some problems with openssl on Ubuntu, so I punted by installing
# cpanm first, which is easy. I can install IO::Socket::SSL with that,
# then switch back to cpan. I didn't explore this further, but what you
# see here hasn't caused problems for me.
#
# Need HTTP::Tiny 0.055 or later. Probably don't need it at all since I'm
# not using cpan here.
#
# Test::Manifest is there because it's a thing I do. If you are writing
# modules and don't know what it is, you don't need it.
            - name: Install cpanm and multiple modules
              run: |
                curl -L https://cpanmin.us | perl - App::cpanminus
                cpanm --notest IO::Socket::SSL HTTP::Tiny ExtUtils::MakeMaker Test::Manifest ${{ vars.EXTRA_CPANM_MODULES }}
                cpan -M http://www.cpan.org -T Test::Manifest ${{ vars.EXTRA_CPAN_MODULES }}
# Install the dependencies, again not testing them. This installs the
# module in the current directory, so we end up installing the module,
# but that's not a big deal.
            - name: Install dependencies
              run: |
                cpanm --notest --installdeps --with-suggests --with-recommends .
            - name: generate
              run: |
                perl util/generate --quiet
                git status
                perl -Ilib -MCPANSA::DB -E 'say q(CPANSA_VERSION=) . CPANSA::DB->VERSION' >> $GITHUB_ENV
                perl -Ilib -MCPANSA::DB -E 'say q(PR_BRANCH_NAME=) . CPANSA::DB->VERSION' >> $GITHUB_ENV
            - name: test
              run: |
                perl Makefile.PL
                make test
            - name: commit
              run: |
                git add cpan-security-advisory.json cpan-security-advisory.json.gpg lib/
                git commit -m "data update for ${{ env.CPANSA_VERSION }}"
                git tag release-${{ env.CPANSA_VERSION }}
            - name: Create Pull Request
              id: pull-request
              uses: peter-evans/create-pull-request@v6
              with:
                token: ${{ github.token }}
                assignees: briandfoy
                labels: "Type: data update"
                title: Data update for ${{env.CPANSA_VERSION}}
                delete-branch: true
                branch: ${{env.PR_BRANCH_NAME}}
                base: master
            - name: Merge the pull request
              env:
                GH_TOKEN: ${{ secrets.APPROVE_TOKEN }}
              shell: bash
              run: |
                echo "Reviewing pull request <${{ steps.pull-request.outputs.pull-request-number }}>"
                gh pr review  ${{ steps.pull-request.outputs.pull-request-number }} --approve --body 'approved by GitHub Action'
                echo "Merging pull request <${{ steps.pull-request.outputs.pull-request-number }}>"
                gh pr merge ${{ steps.pull-request.outputs.pull-request-number }} --admin --squash
            - name: Push tags
              run: |
                git push origin :${{env.PR_BRANCH_NAME}}
# Now always save the Perl modules in case we updated some versions
            - name: Save Perl modules
              id: perl-modules-cache-save
              uses: actions/cache/save@v4
              if: always()
              with:
                key: ${{ steps.perl-modules-cache-restore.outputs.cache-primary-key }}
                path: |
                  /usr/local/lib/perl5
                  /usr/local/bin/cover
                  /usr/local/bin/cpan
